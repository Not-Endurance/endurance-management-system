@inherits StatefulComponent;

@inject IDateService DateService;
@inject IStartlistService StartlistService;
@using Core.Utilities;
@using EMS.Witness.Common;
@using EMS.Witness.Services;
@using Core.Application.Services;
@using Core.Domain.AggregateRoots.Manager.Aggregates.Startlists;

<div class="row">
	<div class="col">
		<button class="btn btn-primary" @onclick="_ => this.StartlistService.SelectList()">All</button>
	</div>
	@lock(StartlistService.Startlist)
	{
		foreach (var (stage, list) in this.StartlistService.StartlistsByStage)
		{
			<div class="col">
				<button class="btn btn-primary" @onclick="_ => this.StartlistService.SelectList(stage)">@stage</button>
			</div>
		}
	}
</div>
<div class="row">
	<table class="table">
	
		<thead>
			<tr>
				<th>#</th>
				<th>Name</th>
				<th>Stage</th>
				<th>Distance</th>
				<th>Time</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var entry in this.StartlistService.Startlist)
			{
				<tr class="@(entry.IsRestOver ? "text-muted" : "")">
					<td>@entry.Number</td>
					<td>@entry.AthleteName</td>
					<td>@entry.Stage</td>
					<td>@entry.Distance</td>
					@if (entry.IsRestOver && entry.IsLateStart)
					{
						var diff = entry.StartTime - this.DateService.GetNow();
						var colorClass = diff.IsNegative()
							? "text-danger"
							: "";
						<td class="@colorClass">@this.DateService.FormatTime(diff)</td>
					}
					else if (entry.IsRestOver)
					{
						<td>@this.DateService.FormatTime(entry.StartTime)</td>
					}
					else
					{
						<td>@this.DateService.FormatTime(entry.StartTime - this.DateService.GetNow())</td>
					}
				</tr>
			}
		</tbody>
	</table>
</div>

@code {
	private bool loop = true;
	protected override async Task OnInitializedAsync()
	{
		while(this.loop)
		{
			this.StartlistService.Startlist.Sort();
			await Task.Delay(TimeSpan.FromSeconds(1));
			await this.InvokeAsync(this.StateHasChanged);
		}
	}

	protected override bool ShouldRender(object changedState)
	{
		return changedState == this.StartlistService.Startlist;
	}

	public override void Dispose()
	{
		this.loop = false;
		base.Dispose();
	}
}	
