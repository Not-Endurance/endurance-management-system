@inherits StatefulComponent;

@using Core.Application.Services;
@using Core.Domain.AggregateRoots.Manager.Aggregates.Participants;
@using Core.Models;
@using EMS.Witness.Common;
@using EMS.Witness.Services;
@inject IParticipantsService ParticipantsService;
@inject IDateService DateService;

@if (this.ParticipantsService.Selected.Any())
{
    <div class="row">

        <table class="table">
            <thead>
                <tr>
                    <th>-</th>
                    <th>#</th>
                    <th>Name</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var arrive in this.ParticipantsService.Selected)
                {
                    <tr>
                        <td>
                            <button class="btn btn-danger btn-table" @onclick="_ => this.ParticipantsService.RemoveSelected(arrive)">-</button>
                        </td>
                        <td>
                            <strong>@arrive.Number</strong>
                        </td>
                        <td>@arrive.Name</td>
                        <td>
                            <button class="btn btn-success btn-table" @onclick="_ => this.ParticipantsService.CreateSnapshot(arrive)">Snapshot</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<div class="row">
    <div class="col">
        <button class="btn btn-warning btn-table"
                disabled=@sortByNumber
                @onclick="_ => this.SortByNumber()">
            #
        </button>
    </div>
    <div class="col">
        <button class="btn btn-warning btn-table"
                disabled=@sortByDistance
                @onclick="_ => this.SortByDistance()">
            Lenght
        </button>
    </div>
    <div class="col">
        <button class="btn btn-warning btn-table"
                disabled=@sortByName
                @onclick="_ => this.SortByName()">
            Name
        </button>
    </div>
</div>
<div class="row">
    <table class="table">
        <thead>
            <tr>
                <th>#</th>
                <th>S</th>
                <th>L</th>
                <th>Name</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @lock(this.ParticipantsService.Participants)
            {
                foreach (var arrive in this.ParticipantsService.Participants)
                {
                    var isDisabled = this.ParticipantsService.Selected.Contains(arrive) ? true : false;
                    <tr>
                        <td>
                            <strong>@arrive.Number</strong>
                        </td>
                        <td>@arrive.LapNumber</td>
                        <td>@arrive.LapDistance</td>
                        <td>@arrive.Name</td>
                        <td>
                            <button class="btn btn-success btn-table" 
                                    disabled=@isDisabled
                            @onclick="_ => this.ParticipantsService.Select(arrive)">
                                Select
                            </button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@code {
    private bool sortByNumber = true;
    private bool sortByDistance = false;
    private bool sortByName = false;

    protected override bool ShouldRender(object changedState)
    {
        return changedState == this.ParticipantsService.Participants || changedState == this.ParticipantsService.Selected;
    }

    protected override void OnInitialized()
    {
        WitnessState.StateLoaded += HandleStateLoaded;
    }

    public override void Dispose()
    {
        WitnessState.StateLoaded -= HandleStateLoaded;
        base.Dispose();
    }

    private async void HandleStateLoaded(object? sender, EventArgs _)
    {
        await InvokeAsync(StateHasChanged);
    }

    private void SortByNumber()
    {
        this.sortByNumber = true;
        this.sortByDistance = false;
        this.sortByName = false;
        this.ParticipantsService.Sort(byNumber: true);
    }
    private void SortByDistance()
    {
        this.sortByNumber = false;
        this.sortByDistance = true;
        this.sortByName = false;
        this.ParticipantsService.Sort(byDistance: true);
    }
    private void SortByName()
    {
        this.sortByNumber = false;
        this.sortByDistance = false;
        this.sortByName = true;
        this.ParticipantsService.Sort(byName: true);
    }
}